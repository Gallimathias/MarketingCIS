<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TheMarketingPlatform.Core</name>
    </assembly>
    <members>
        <member name="T:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1">
            <summary>
            Basic class for CognitiveSerivces
            </summary>
            <typeparam name="TResponse">Return type of the API response of the service</typeparam>
        </member>
        <member name="P:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.AppID">
            <summary>
            The AppID fro the API call
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.BaseURL">
            <summary>
            The base microsoft api call
            </summary>
        </member>
        <member name="F:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.key">
            <summary>
            The API key for the api call
            </summary>
        </member>
        <member name="F:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.serviceName">
            <summary>
            API service name not the Service ID
            </summary>
        </member>
        <member name="F:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.serviceVersion">
            <summary>
            The API version, current version is 2.0
            </summary>
        </member>
        <member name="F:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.baseUrlString">
            <summary>
            Base url oft the BaseUrl
            </summary>
        </member>
        <member name="F:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.staging">
            <summary>
            Set true if API use staging key
            </summary>
        </member>
        <member name="F:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.verbose">
            <summary>
            If true then you get the detailed result
            </summary>
        </member>
        <member name="F:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.dateTimeOffset">
            <summary>
            Current DateTime
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.#ctor(System.String,System.String)">
            <summary>
            Basic class for CognitiveSerivces
            </summary>
            <param name="appID">The ID of yout App API</param>
            <param name="key">The API key of your App</param>
        </member>
        <member name="M:TheMarketingPlatform.Core.CognitiveServices.CognitiveServiceClient`1.GetResult(System.String)">
            <summary>
            Gets the result with JsonConvert from api
            </summary>
            <param name="result">The current result</param>
            <returns>The Deserialized result</returns>
        </member>
        <member name="T:TheMarketingPlatform.Core.ConfigManagement">
            <summary>
            Manager for basic settings, is fed from the config file
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.ConfigManagement.Config">
            <summary>
            Gets the current config
            </summary>
        </member>
        <member name="T:TheMarketingPlatform.Core.ConfigManagement.ConfigManagementEventHandler">
            <summary>
            Handles config management events
            </summary>
            <param name="key">The Setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="E:TheMarketingPlatform.Core.ConfigManagement.ValueHasChanged">
            <summary>
            Throw if the Value of a setting has changed
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.ConfigManagement.#ctor">
            <summary>
            Manager for basic settings, is fed from the config file
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.ConfigManagement.Item(System.String)">
            <summary>
            Gets or set a setting
            </summary>
            <param name="key">The Setting</param>
            <returns>The Value of the setting</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.ConfigManagement.GetValue``1(System.String)">
            <summary>
            Gets the value of a setting with converting in target type
            </summary>
            <typeparam name="T">The target type</typeparam>
            <param name="key">The setting</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.ConfigManagement.Load(System.String)">
            <summary>
            Loads a Config file
            </summary>
            <param name="fullName">The full name of the config file</param>
            <returns>This returns a tubel. Loaded is true if all fine and false when theres a error. Exception is null is loading ok</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.ConfigManagement.ApplyChangesToFile">
            <summary>
            Saves all changes to the current file
            </summary>
        </member>
        <member name="T:TheMarketingPlatform.Core.JSON.Config">
            <summary>
            Represents a config file for json
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.JSON.Config.Settings">
            <summary>
            the main settings dictionary
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.JSON.Config.#ctor">
            <summary>
            Represents a config file for json
            </summary>
        </member>
        <member name="T:TheMarketingPlatform.Core.Network.NetworkMessage">
            <summary>
            A message to send between server and client
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.NetworkMessage.Tag">
            <summary>
            The current message tag for a command dispatch
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.NetworkMessage.Payload">
            <summary>
            The data payload. Is not for Json
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.NetworkMessage.IsEmpty">
            <summary>
            A Message is empty if the tag is null or empty or contains a plus and the payload is 0
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.NetworkMessage.#ctor(System.String,System.Byte[])">
            <summary>
            A message to send between server and client
            </summary>
            <param name="tag">The network tag</param>
            <param name="payload">The data to send</param>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.NetworkMessage.DefaultOk">
            <summary>
            Gets a default ok to send
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.NetworkMessage.DefaultError">
            <summary>
            Gets a default error to send
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.NetworkMessage.EmptyMessage">
            <summary>
            Gets a empty message to send
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.NetworkMessage.Serialize(TheMarketingPlatform.Core.Network.NetworkMessage)">
            <summary>
            Serialize Message with payload to byte array
            </summary>
            <param name="message">The message to serialize</param>
            <returns>The message as byte array with payload</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.NetworkMessage.Deserialize(System.Byte[])">
            <summary>
            Deserialize a byte array from a message with payload to message
            </summary>
            <param name="data">A byte array from a message with payload</param>
            <returns>A New message with Tag and Payload</returns>
        </member>
        <member name="T:TheMarketingPlatform.Core.Network.TcpConnection">
            <summary>
            Represents a connection via tcp
            </summary>
        </member>
        <member name="F:TheMarketingPlatform.Core.Network.TcpConnection.MAX_EMPTYCOUNT">
            <summary>
            Max no. of allowed failed messages
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.TcpConnection.Stream">
            <summary>
            The NetworkStream from the base tcpClient
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.TcpConnection.Connected">
            <summary>
            Returns true if the base tcpClient is connected
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.TcpConnection.IsSecure">
            <summary>
            Returns true if the connection has a key and use a secure tunnel
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.TcpConnection.Key">
            <summary>
            Key from diffiehellman key exchange. If set then the connection is secure
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.TcpConnection.Id">
            <summary>
            The id of the connection in the server. Only serverside
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Network.TcpConnection.EmptyCount">
            <summary>
            Count of failed messages
            </summary>
        </member>
        <member name="T:TheMarketingPlatform.Core.Network.TcpConnection.MessageEventHandler">
            <summary>
            Handles message events
            </summary>
            <param name="tcpConnection">The sender</param>
            <param name="networkMessage">The throwing message</param>
        </member>
        <member name="T:TheMarketingPlatform.Core.Network.TcpConnection.ConnectionEventHandler">
            <summary>
            Handles connection events
            </summary>
            <param name="tcpConnection">the sending connection</param>
        </member>
        <member name="E:TheMarketingPlatform.Core.Network.TcpConnection.OnMessageRecived">
            <summary>
            Thrown if a message is recived
            </summary>
        </member>
        <member name="E:TheMarketingPlatform.Core.Network.TcpConnection.OnDisconnect">
            <summary>
            Thrown on disconnect
            </summary>
        </member>
        <member name="E:TheMarketingPlatform.Core.Network.TcpConnection.OnConnect">
            <summary>
            Thrown on connect
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.TcpConnection.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Represents a connection via tcp. From exist connection
            </summary>
            <param name="tcpClient">a connected tcp client</param>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.TcpConnection.#ctor(System.String,System.Int32)">
            <summary>
            Represents a connection via tcp. Implements a new connection
            </summary>
            <param name="host">the target host</param>
            <param name="port">the target port</param>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.TcpConnection.Disconnect">
            <summary>
            Close this connection
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.TcpConnection.Connect(System.String,System.Int32)">
            <summary>
            Start or restart the connection
            </summary>
            <param name="host">The target host</param>
            <param name="port">The target port</param>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.TcpConnection.BeginRecive">
            <summary>
            Beginns async listening
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.TcpConnection.ReciveMessage">
            <summary>
            Wait on recive
            </summary>
            <returns>The recived message</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.TcpConnection.Send(TheMarketingPlatform.Core.Network.NetworkMessage)">
            <summary>
            Sends a network message
            </summary>
            <param name="message">the message to send</param>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.TcpConnection.SendAsync(TheMarketingPlatform.Core.Network.NetworkMessage)">
            <summary>
            Sends a network message async
            </summary>
            <param name="message">the message to send</param>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.TcpConnection.GetDataFromList(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Converts a byte[] list to a singel dimension array
            </summary>
            <param name="dataList">A list of byte arrays</param>
            <returns>a singel dimension array</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.Network.TcpConnection.GetListFromData(System.Byte[])">
            <summary>
            Converts a single dimension byte array to a byte array list
            </summary>
            <param name="data">a single dimension byte array</param>
            <returns>returns a list of byte arrays</returns>
        </member>
        <member name="T:TheMarketingPlatform.Core.Secure.Encryption">
            <summary>
            Help class for encryption and decryption
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.Encryption.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts data with aes
            </summary>
            <param name="data">the clear data</param>
            <param name="key">the key for aes</param>
            <param name="vector">the IV vector</param>
            <returns>returns encrypted data</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.Encryption.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts data with aes
            </summary>
            <param name="data">the encrypted data</param>
            <param name="key">a key for aes</param>
            <param name="vector">a IV vector for aes</param>
            <returns>the decrypted data</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.Encryption.Hash256(System.Byte[])">
            <summary>
            Hash data with the sha 256 algorithm
            </summary>
            <param name="data">Data to hash</param>
            <returns>returns a 256 bit hash</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.Encryption.Hash512(System.Byte[])">
            <summary>
            Hash data with the sha 512 algorithm
            </summary>
            <param name="data">Data to hash</param>
            <returns>returns a 512 bit hash</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.Encryption.GetKeyAndVector">
            <summary>
            Returns a random vector and key for aes
            </summary>
            <returns>Returns a tuble of vector and key</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.Encryption.GetKey">
            <summary>
            Generates a random key for aes
            </summary>
            <returns>a random key</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.Encryption.GetVector">
            <summary>
            Generates a random vector for aes
            </summary>
            <returns>a random IV vector</returns>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.Encryption.GetRandom(System.Int32)">
            <summary>
            Get random numbers with specific size
            </summary>
            <param name="size">the size of the array</param>
            <returns>returns a array with random numbers</returns>
        </member>
        <member name="T:TheMarketingPlatform.Core.Secure.SaveString">
            <summary>
            A scure string implementation with a way back
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Secure.SaveString.SecureString">
            <summary>
            The base secure string
            </summary>
        </member>
        <member name="P:TheMarketingPlatform.Core.Secure.SaveString.Value">
            <summary>
            The converted value from secure string
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.SaveString.#ctor">
            <summary>
            A scure string implementation with a way back
            </summary>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.SaveString.#ctor(System.Security.SecureString)">
            <summary>
            A scure string implementation with a way back. Converts a existing secure string to save string
            </summary>
            <param name="value">a existing secure string</param>
        </member>
        <member name="M:TheMarketingPlatform.Core.Secure.SaveString.#ctor(System.String)">
            <summary>
            A scure string implementation with a way back. Converts a string to a save string
            </summary>
            <param name="value">a string to save</param>
        </member>
    </members>
</doc>
